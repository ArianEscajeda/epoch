branch1exp<-branch1exp[,rownames(branch1st)]
trans<-trans_prop(branch1exp)
query<-trans["D1_TF1",][1:100]
template<-trans["Target27",][1:100]
plot(
dtw(query,template,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2);
branch1exp<-expSmoothed[,cells]
branch1st<-sampTab[cells,]
branch1st<-branch1st[cells[order(branch1st$pseudotime)],]
branch1exp<-branch1exp[,rownames(branch1st)]
trans<-trans_prop(branch1exp)
query<-trans["D1_TF1",][1:100]
template<-trans["Target27",][1:100]
plot(
dtw(query,template,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway");
methods<-c("x","y","z")
topTFS<-data.frame(matrix(data=NA,ncol=length(methods),nrow=num_TFs))
num_TFs=10
topTFS<-data.frame(matrix(data=NA,ncol=length(methods),nrow=num_TFs))
topTFs
topTFS
rank<-c("1","x","er","rd")
rank<-rank[1:3]
rank
topTFS[1:length(rank),"X1"]<-rank
topTFS
load("~/Desktop/LabThings/CompForce/Data/synthetic_data/dataset_09/102519_model.RData")
cf<-sapply(c("expression_matrix","sample_table","start","target","species","TFs","custom_network","parameters","results"),function(x) NULL)
cf
methods<-c("diffexp","mogrify","cellnet","seesawpred")
methods
paste0("default_params_",methods)
x<-c("a","b","c")
y<-c("a","b","c","d")
all(x %in% y)
all(y %in% x)
is.null(NULL)
!is.null(NULL) & !is.null(NULL)
start<-"a"
target<-"b"
cell_transitions<-data.frame(start=start,target=target,transition_name=paste(start,target,sep="_"))
cell_transitions
bet<-function(){print("hi")}
bet()
do.call(bet)
do.call(bet())
do.call(bet(),,)
get(bet)()
eval(bet())
eval(bet())
eval(bet
)
eval(bet)
eval(bet())
bet()
call(bet)
bet2<-function(){print("asdfsdf")}
bet2()
t<-c("bet","bet2")
call(t)
eval(call(t))
t
eval(t)
t
get(t)()
for(def in t){}
for(def in t){
get(def)()
}
def<-"default_params_cellnet"
strsplit(def)[[3]]
strsplit(def)[3
]
strsplit(def,split="_")
strsplit(def,split="_")[3]
strsplit(def,split="_")[[1]]
strsplit(def,split="_")[[1]][3]
paste0(strsplit(def,split="_")[[1]][3],"_parameters")
methodlist<-c("diffexp","mogrify","cellnet","seesawpred")
parameters<-sapply(c("description_column",paste0(methodlist,"_parameters")),function(x) NULL)
parameters
parameters[[paste0(strsplit(def,split="_")[[1]][3],"_parameters")]]
parameters[[paste0(strsplit(def,split="_")[[1]][3],"_parameters")]]<-3
parameters
read.table(text=gsub(",", "\t", readLines("~/Desktop/LabThings/CompForce/Data/synthetic_data/dataset_08/compforce_runs_100919/compforce_runs.csv")),header=TRUE,stringsAsFactors = FALSE)
read.table(text=gsub(",", "\t", readLines("~/Desktop/LabThings/CompForce/Data/synthetic_data/dataset_08/compforce_runs_100919/compforce_runs.csv")),header=TRUE,stringsAsFactors = FALSE)
transitions<-read.table(text=gsub(",", "\t", readLines("~/Desktop/LabThings/CompForce/Data/synthetic_data/dataset_08/compforce_runs_100919/compforce_runs.csv")),header=TRUE,stringsAsFactors = FALSE)
transitions
paste(transitions$start,transitions$target,sep="_")
paste(transitions$source,transitions$target,sep="_")
cell_transitions<-data.frame(start=character(),target=character(),transition_name=character())
cell_transitions
length(cell_transitions)
nrows(cell_transitions)
nrow(cell_transitions)
res<-sapply(paste0(methodlist,"_parameters"),function(x) NULL)
res
res<-sapply(paste0(methodlist,"_results"),function(x) NULL)
res
bet<-function(x){print(x+2)}
bet(2)
t<-"bet"
get(t)(2)
get(t)(4)
for (i in names(res)){print(i)}
res[["diffexp_results"]]
res["diffexp_results"]
res[]"diffexp_results"]]
library(hd5fr)
library(hdf5r)
library(devtools)
install_github("velocyto-team/velocyto.R")
library(tidyverse)
library(dyngen)
set.seed(1212)
model <-
initialise_model(
num_tfs = 20,
num_targets = 50,
num_hks = 30,
backbone = linear(),
verbose = TRUE
)
names(list_backbones())
model <-
initialise_model(
num_tfs = 20,
num_targets = 50,
num_hks = 30,
backbone = linear,
verbose = TRUE
)
model <-
initialise_model(
num_tfs = 20,
num_targets = 50,
num_hks = 30,
backbone = backbone_linear(),
verbose = TRUE
)
plot_backbone_statenet(model)
out<-generate_dataset(model,make_plots=TRUE)
out$plot
gen_data <- function(model, output_dir = NULL, make_plots = FALSE, store_grn = FALSE){
model <- model %>%
generate_tf_network() %>%
generate_feature_network() %>%
generate_kinetics() %>%
generate_gold_standard() %>%
generate_cells() %>%
generate_experiment()
dataset <-
wrap_dataset(model, store_grn = store_grn)
# write to file
if (!is.null(output_dir)) {
dir.create(dirname(output_dir), showWarnings = FALSE, recursive = FALSE)
write_rds(dataset, paste0(output_dir, "dataset.rds"), compress = "gz")
write_rds(model, paste0(output_dir, "model.rds"), compress = "gz")
}
if (make_plots) {
# make plots :scream:
g1 <- plot_backbone_statenet(model) + labs(title = "Backbone state network")
g2 <- plot_backbone_modulenet(model) + labs(title = "Backbone module reg. net.")
g3 <- plot_feature_network(model, show_targets = FALSE) + labs(title = "TF reg. net.")
g4 <- plot_feature_network(model) + labs(title = "TF + target reg. net.")
g5 <- plot_gold_simulations(model) + labs(title = "Gold + simulations")
g6 <- plot_gold_mappings(model, do_facet = FALSE) + labs(title = "Simulations to gold mapping")
g7 <- plot_simulations(model) + labs(title = "Simulation time")
g8 <- plot_gold_expression(model, what = "w") + labs(title = "Gold pre-mRNA expression over time")
g9 <- plot_simulation_expression(model, what = "w") + labs(title = "Simulation 1 pre-mRNA expression over time")
g10 <- plot_simulation_expression(model, what = "x") + labs(title = "Simulation 1 mRNA expression over time")
g11 <- plot_gold_expression(model, what = "x") + labs(title = "Gold mRNA expression over time")
g <- patchwork::wrap_plots(
g1, g2, g3, g4, g5, g6, g7, g8, g11, g9, g10,
byrow = TRUE,
ncol = 3
) +
patchwork::plot_annotation(tag_levels = "A")
if (!is.null(output_dir)) {
ggsave(paste0(output_dir, "plot.pdf"), g, width = 30, height = 25)
}
}
if (is.null(output_dir)) {
out <- list(dataset = dataset, model = model)
if (make_plots) {
out$plot <- g
}
out
} else {
invisible()
}
}
library(dyngen)
library(tidyverse)
set.seed(1111)
model <-initialise_model(
num_tfs = 20,
num_targets = 50,
num_hks = 30,
backbone = linear,
verbose = TRUE,
num_cells = 8000
)
model <-initialise_model(
num_tfs = 20,
num_targets = 50,
num_hks = 30,
backbone = backbone_linear(),
verbose = TRUE,
num_cells = 8000
)
out<-gen_data(model,make_plots=TRUE)
dataset<-out$dataset
model<-out$model
print(out$plot)
backbone_linear()
library(dyngen)
library(tidyverse)
set.seed(1111)
backbone_linear()
gen_data <- function(model, output_dir = NULL, make_plots = FALSE, store_grn = FALSE){
model <- model %>%
generate_tf_network() %>%
generate_feature_network() %>%
generate_kinetics() %>%
generate_gold_standard() %>%
generate_cells() %>%
generate_experiment()
dataset <-
wrap_dataset(model, store_grn = store_grn)
# write to file
if (!is.null(output_dir)) {
dir.create(dirname(output_dir), showWarnings = FALSE, recursive = FALSE)
write_rds(dataset, paste0(output_dir, "dataset.rds"), compress = "gz")
write_rds(model, paste0(output_dir, "model.rds"), compress = "gz")
}
if (make_plots) {
# make plots :scream:
g1 <- plot_backbone_statenet(model) + labs(title = "Backbone state network")
g2 <- plot_backbone_modulenet(model) + labs(title = "Backbone module reg. net.")
g3 <- plot_feature_network(model, show_targets = FALSE) + labs(title = "TF reg. net.")
g4 <- plot_feature_network(model) + labs(title = "TF + target reg. net.")
g5 <- plot_gold_simulations(model) + labs(title = "Gold + simulations")
g6 <- plot_gold_mappings(model, do_facet = FALSE) + labs(title = "Simulations to gold mapping")
g7 <- plot_simulations(model) + labs(title = "Simulation time")
g8 <- plot_gold_expression(model, what = "w") + labs(title = "Gold pre-mRNA expression over time")
g9 <- plot_simulation_expression(model, what = "w") + labs(title = "Simulation 1 pre-mRNA expression over time")
g10 <- plot_simulation_expression(model, what = "x") + labs(title = "Simulation 1 mRNA expression over time")
g11 <- plot_gold_expression(model, what = "x") + labs(title = "Gold mRNA expression over time")
g <- patchwork::wrap_plots(
g1, g2, g3, g4, g5, g6, g7, g8, g11, g9, g10,
byrow = TRUE,
ncol = 3
) +
patchwork::plot_annotation(tag_levels = "A")
if (!is.null(output_dir)) {
ggsave(paste0(output_dir, "plot.pdf"), g, width = 30, height = 25)
}
}
if (is.null(output_dir)) {
out <- list(dataset = dataset, model = model)
if (make_plots) {
out$plot <- g
}
out
} else {
invisible()
}
}
library(dyngen)
library(tidyverse)
set.seed(1111)
backbone<-bblego(
bblego_start("A", type = "simple", num_modules = 2),
bblego_linear("A", "B", type = "simple", num_modules = 5),
bblego_linear("B", "C", type = "simple", num_modules = 3),
bblego_end("C",type="simple",num_modules=2)
)
model <-initialise_model(
num_tfs = 20,
num_targets = 50,
num_hks = 30,
backbone = backbone,
verbose = TRUE,
num_cells = 8000
)
out<-gen_data(model,make_plots=TRUE)
print(out$plot)
rm(list=ls())
backbone<-bblego(
bblego_start("A", type = "simple", num_modules = 2),
bblego_linear("A", "B", type = "simple", num_modules = 5),
bblego_linear("B", "C", type = "simple", num_modules = 4),
bblego_end("C",type="simple",num_modules=4)
)
model <-initialise_model(
num_tfs = 20,
num_targets = 50,
num_hks = 30,
backbone = backbone,
verbose = TRUE,
num_cells = 8000
)
out<-gen_data(model,make_plots=TRUE)
gen_data <- function(model, output_dir = NULL, make_plots = FALSE, store_grn = FALSE){
model <- model %>%
generate_tf_network() %>%
generate_feature_network() %>%
generate_kinetics() %>%
generate_gold_standard() %>%
generate_cells() %>%
generate_experiment()
dataset <-
wrap_dataset(model, store_grn = store_grn)
# write to file
if (!is.null(output_dir)) {
dir.create(dirname(output_dir), showWarnings = FALSE, recursive = FALSE)
write_rds(dataset, paste0(output_dir, "dataset.rds"), compress = "gz")
write_rds(model, paste0(output_dir, "model.rds"), compress = "gz")
}
if (make_plots) {
# make plots :scream:
g1 <- plot_backbone_statenet(model) + labs(title = "Backbone state network")
g2 <- plot_backbone_modulenet(model) + labs(title = "Backbone module reg. net.")
g3 <- plot_feature_network(model, show_targets = FALSE) + labs(title = "TF reg. net.")
g4 <- plot_feature_network(model) + labs(title = "TF + target reg. net.")
g5 <- plot_gold_simulations(model) + labs(title = "Gold + simulations")
g6 <- plot_gold_mappings(model, do_facet = FALSE) + labs(title = "Simulations to gold mapping")
g7 <- plot_simulations(model) + labs(title = "Simulation time")
g8 <- plot_gold_expression(model, what = "w") + labs(title = "Gold pre-mRNA expression over time")
g9 <- plot_simulation_expression(model, what = "w") + labs(title = "Simulation 1 pre-mRNA expression over time")
g10 <- plot_simulation_expression(model, what = "x") + labs(title = "Simulation 1 mRNA expression over time")
g11 <- plot_gold_expression(model, what = "x") + labs(title = "Gold mRNA expression over time")
g <- patchwork::wrap_plots(
g1, g2, g3, g4, g5, g6, g7, g8, g11, g9, g10,
byrow = TRUE,
ncol = 3
) +
patchwork::plot_annotation(tag_levels = "A")
if (!is.null(output_dir)) {
ggsave(paste0(output_dir, "plot.pdf"), g, width = 30, height = 25)
}
}
if (is.null(output_dir)) {
out <- list(dataset = dataset, model = model)
if (make_plots) {
out$plot <- g
}
out
} else {
invisible()
}
}
out<-gen_data(model,make_plots=TRUE)
print(out$plot)
model$simulation_params
model$simulation_params$total_time
rm(backbone, model,out)
backbone<-bblego(
bblego_start("A", type = "simple", num_modules = 2),
bblego_linear("A", "B", type = "simple", num_modules = 5),
bblego_linear("B", "C", type = "simple", num_modules = 4),
bblego_end("C",type="simple",num_modules=4)
)
model <-initialise_model(
num_tfs = 20,
num_targets = 50,
num_hks = 30,
backbone = backbone,
verbose = TRUE,
num_cells = 8000
)
model$simulation_params$total_time<-5
model$simulation_params
out<-gen_data(model,make_plots=TRUE)
print(out$plot)
rm(backbone,model,out)
library(dyngen)
library(tidyverse)
set.seed(1111)
backbone<-bblego(
bblego_start("A", type = "simple", num_modules = 2),
bblego_linear("A", "B", type = "simple", num_modules = 5),
bblego_linear("B", "C", type = "simple", num_modules = 4),
bblego_end("C",type="simple",num_modules=4)
)
model <-initialise_model(
num_tfs = 20,
num_targets = 50,
num_hks = 30,
backbone = backbone,
verbose = TRUE,
num_cells = 8000
)
model$simulation_params$total_time<-7
out<-gen_data(model,make_plots=TRUE)
print(out$plot)
dataset<-out$dataset
dataset$cell_info
dataset$counts
load("~/Desktop/LabThings/Epoch/synthetic_data/trajectory01/trajectory01_50cells_expX_011420.rda")
load("~/Desktop/LabThings/Epoch/synthetic_data/trajectory01/trajectory01_50cells_sampTab_011420.rda")
sampTab
load("~/Desktop/LabThings/Epoch/synthetic_data/trajectory01/011420_trajectory01.RData")
dataset$cell_info
dataset$progressions
dataset$milestone_percentages
dataset$milestone_ids
seq(1,length(dataset$milestone_ids)
)
key<-data.frame(id=dataset$milestone_ids,num=seq(1,length(dataset$milestone_ids)))
key
key<-data.frame(id=dataset$milestone_ids,num=seq(0,length(dataset$milestone_ids)-1))
rownames(key)<-key$id
key
length(key)
nrow(key)
progressions<-dataset$progressions
progressions<-as.data.frame(progressions)
rownames(progressions)<-progressions$cell_id
progressions$cell_id<-NULL
progressions$dpt_groups<-progressions$to
progressions
progressions$pseudotime<-(key[progressions$dpt_groups,"num"]+progressions$percentage)/nrow(key)
progressions
cell_info<-cbind(cell_info,progressions)
firstup <- function(x){
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
load("~/Desktop/LabThings/CompForce/enrichR_TFnetwork/mouse_PKN_021919.rda")
mouse_PKN<-mouse_PKN[mouse_PKN$Interaction=="Unspecified",]
mouse_PKN$TF<-tolower(mouse_PKN$TF)
mouse_PKN$TF<-firstup(mouse_PKN$TF)
mouse_PKN$Target<-tolower(mouse_PKN$Target)
mouse_PKN$Target<-firstup(mouse_PKN$Target)
gs<-split(mouse_PKN$Target,mouse_PKN$TF)
gs
mouse_PKN
load("~/Desktop/LabThings/CompForce/Data/synthetic_data/dataset_09/compforce_runs_102519/dataset_09_classifier_102519.rda")
classifier$cnProc$xpairs
classifier$cnProc$cgenes
methods<-c("CLR_pearson","CLR_MI","CLR_pearson_PT","CLR_MI_PT","Epoch_pearson","Epoch_pearson_PT","Epoch_MI_PT","Epoch_MI","GENIE3","GENIE3_dyngenes","GENIE3_dyngenes_PT")
'GENIE3' %in% methods
require(GENIE3)
is(methods)
is(x)
enet<-NA
enet_mi<-NA
xnet<-NA
xnet_mi<-NA
gnet<-NA
gnet_dyn<-NA
enet<-matrix(0,nrow=3,ncol=3)
enet
res<-list(enet=enet, enet_mi=enet_mi, xnet=xnet, xnet_mi=xnet_mi, gnet=gnet, gnet_dyn=gnet_dyn)
res
res[!is.na(res)]
enet<-NA
enet_mi<-NA
xnet<-NA
xnet_mi<-NA
gnet<-NA
gnet_dyn<-NA
enet<-matrix(0,nrow=3,ncol=3)
xnet<-matrix(0,nrow=3,ncol=3)
res<-list(enet=enet, enet_mi=enet_mi, xnet=xnet, xnet_mi=xnet_mi, gnet=gnet, gnet_dyn=gnet_dyn)
res[!is.na(res)]
library(igraph)
library(qgraph)
library(loomR)
library(gam)
library(singleCellNet)
library(warpnet)
library(minet)
list12<-loadLoomExpUMAP{"~/Downloads/adcluster3_forWarpnet_011820.loom",xname='leiden'}
list12<-loadLoomExpUMAP("~/Downloads/adcluster3_forWarpnet_011820.loom",xname='leiden')
list12<-connect(file="~/Downloads/adcluster3_forWarpnet_011820.loom",mode='r+',skip.validate=TRUE)
library(reshape2)
library(ggplot2)
library(igraph)
library(qgraph)
library(loomR)
library(gam)
library(minet)
library(singleCellNet)
library(pheatmap)
library(RColorBrewer)
library(SCopeLoomR)
library(GENIE3)
library(loomR)
library(DescTools)
setwd("~/Desktop/LabThings/Epoch/Epoch/warpnet")
devtools::load_all()
list12<-connect(filename="~/Downloads/adcluster3_forWarpnet_011820.loom",mode="r+",skip.validate = TRUE)
list12[['col_attrs']]
print(list12[['col_attrs']])
list12[['col_attrs']][1:10]
list12[['col_attrs']][1:10,]
list12[['col_attrs']][,]
list12[['col_attrs']][]
list12[['col_attrs']]$names
list12$close_all()
rm(list12)
setwd("~/Desktop/LabThings/Epoch/Epoch/warpnet")
devtools::load_all()
list12<-loadLoomExpDiffMap_UMAP("~/Downloads/adcluster3_forWarpnet_011820.loom",xname="leiden",has_dpt_groups = TRUE)
list12[['sampTab']]
