dnorm(c(-1,-2,2,3,4))
dnorm(1,mean-1)
dnorm(1,mean=1)
dnorm(2,mean=1)
load("~/Desktop/LabThings/CyTOF/PBMC1/CyTOF_data/cytof_expX_052319.rda")
load("~/Desktop/LabThings/CyTOF/PBMC1/CyTOF_data/cytof_sampTab_052319.rda")
dim(cytof_expX)
head(cytof_st)
exp<-cytof_expX[,rownames(cytof_st[cytof_st$cell_type %in% c("NK cells","B cells")])]
exp<-cytof_expX[,rownames(cytof_st[cytof_st$cell_type %in% c("NK cells","B cells")]),]
exp<-cytof_expX[,rownames(cytof_st[cytof_st$cell_type %in% c("NK cells","B cells"),])]
dim(exp)
exp<-cytof_expX[,rownames(cytof_st[cytof_st$cell_type %in% c("B cells"),])]
exp<-exp[,sample(colnames(exp),20)]
head(exp)
control<-cytof_expX[,sample(colnames(cytof_expX,10))]
control
control<-cytof_expX[,sample(colnames(cytof_expX),10)]
control
expDat<-cbind(exp,control)
dim(expDat)
m<-setNames(c("pos","neg"),c("Yb171_CD20","Er170_CD3"))
m
simulate_flow<-function(expDat, markers, query_cells, control_cells=NA, neg_percentile=0.98, threshold=1){
expDat<-expDat[names(markers),]
if (!is.na(control_cells)){
control_exp<-expDat[,control_cells]
thresh<-setNames(rep(0,length(markers)),names(markers))
for (marker in names(markers)){
if (markers[marker]=="pos"){
thresh[marker]<-quantile(expDat[marker,],neg_percentile)
}else{
thresh[marker]<-quantile(expDat[marker,],(1-neg_percentile))
}
}
}else{
thresh<-setNames(rep(threshold,length(markers)),names(markers))
}
call_pos<-c()
call_neg<-c()
for (cell in cells){
count = 0
for (marker in names(markers)){
if (markers[marker]=="pos" & expDat[marker,cell]>thresh[marker]){
count = count + 1
}else if (markers[marker]=="neg" & expDat[marker,cell]<thresh[marker]){
count = count + 1
}else{
break
}
}
if (count < length(markers)){
call_neg <- c(call_net, cell)
}else{
call_pos <- c(call_pos, cell)
}
}
res<-list(call_pos=call_pos, call_neg=call_neg)
}
sampTab[colnames(control),]
cytof_st[colnames(control),]
control<-cytof_expX[,sample(colnames(cytof_expX),20)]
cytof_st[colnames(control),]
control_cells<-cytof_st[colnames(control),]
control_cells<-control_cells[control_cells$cell_type!="B cells",]
control<-control[,rownames(control_cells)]
expDat<-cbind(exp,control)
res<-simulate_flow(expDat,m,colnames(exp),control_cells=colnames(control))
simulate_flow<-function(expDat, markers, query_cells, control_cells=NA, neg_percentile=0.98, threshold=1){
expDat<-expDat[names(markers),]
if (!is.na(control_cells)){
control_exp<-expDat[,control_cells]
thresh<-setNames(rep(0,length(markers)),names(markers))
for (marker in names(markers)){
if (markers[marker]=="pos"){
thresh[marker]<-quantile(expDat[marker,],neg_percentile)
}else{
thresh[marker]<-quantile(expDat[marker,],(1-neg_percentile))
}
}
}else{
thresh<-setNames(rep(threshold,length(markers)),names(markers))
}
call_pos<-c()
call_neg<-c()
for (cell in query_cells){
count = 0
for (marker in names(markers)){
if (markers[marker]=="pos" & expDat[marker,cell]>thresh[marker]){
count = count + 1
}else if (markers[marker]=="neg" & expDat[marker,cell]<thresh[marker]){
count = count + 1
}else{
break
}
}
if (count < length(markers)){
call_neg <- c(call_net, cell)
}else{
call_pos <- c(call_pos, cell)
}
}
res<-list(call_pos=call_pos, call_neg=call_neg)
}
res<-simulate_flow(expDat,m,colnames(exp),control_cells=colnames(control))
simulate_flow<-function(expDat, markers, query_cells, control_cells=NA, neg_percentile=0.98, threshold=1){
expDat<-expDat[names(markers),]
if (!is.na(control_cells)){
control_exp<-expDat[,control_cells]
thresh<-setNames(rep(0,length(markers)),names(markers))
for (marker in names(markers)){
if (markers[marker]=="pos"){
thresh[marker]<-quantile(expDat[marker,],neg_percentile)
}else{
thresh[marker]<-quantile(expDat[marker,],(1-neg_percentile))
}
}
}else{
thresh<-setNames(rep(threshold,length(markers)),names(markers))
}
call_pos<-c()
call_neg<-c()
for (cell in query_cells){
count = 0
for (marker in names(markers)){
if (markers[marker]=="pos" & expDat[marker,cell]>thresh[marker]){
count = count + 1
}else if (markers[marker]=="neg" & expDat[marker,cell]<thresh[marker]){
count = count + 1
}else{
break
}
}
if (count < length(markers)){
call_neg <- c(call_neg, cell)
}else{
call_pos <- c(call_pos, cell)
}
}
res<-list(call_pos=call_pos, call_neg=call_neg)
}
res<-simulate_flow(expDat,m,colnames(exp),control_cells=colnames(control))
res
simulate_flow<-function(expDat, markers, query_cells, control_cells=NA, neg_percentile=0.98, threshold=1){
expDat<-expDat[names(markers),]
if (!is.na(control_cells)){
control_exp<-expDat[,control_cells]
thresh<-setNames(rep(0,length(markers)),names(markers))
for (marker in names(markers)){
if (markers[marker]=="pos"){
thresh[marker]<-quantile(expDat[marker,],neg_percentile)
}else{
thresh[marker]<-quantile(expDat[marker,],(1-neg_percentile))
}
}
}else{
thresh<-setNames(rep(threshold,length(markers)),names(markers))
}
call_pos<-c()
call_neg<-c()
for (cell in query_cells){
count = 0
for (marker in names(markers)){
print(marker)
print(thresh[marker])
print(expDat[marker,cell])
if (markers[marker]=="pos" & expDat[marker,cell]>thresh[marker]){
count = count + 1
}else if (markers[marker]=="neg" & expDat[marker,cell]<thresh[marker]){
count = count + 1
}else{
break
}
}
if (count < length(markers)){
call_neg <- c(call_neg, cell)
}else{
call_pos <- c(call_pos, cell)
}
}
res<-list(call_pos=call_pos, call_neg=call_neg)
}
res<-simulate_flow(expDat,m,colnames(exp),control_cells=colnames(control))
m
simulate_flow<-function(expDat, markers, query_cells, control_cells=NA, neg_percentile=0.98, threshold=1){
expDat<-expDat[names(markers),]
if (!is.na(control_cells)){
control_exp<-expDat[,control_cells]
thresh<-setNames(rep(0,length(markers)),names(markers))
for (marker in names(markers)){
if (markers[marker]=="pos"){
thresh[marker]<-quantile(expDat[marker,],neg_percentile)
}else{
thresh[marker]<-quantile(expDat[marker,],(1-neg_percentile))
}
}
}else{
thresh<-setNames(rep(threshold,length(markers)),names(markers))
}
call_pos<-c()
call_neg<-c()
for (cell in query_cells){
count = 0
for (marker in names(markers)){
print(marker)
print(markers[marker])
print(expDat[marker,cell])
print(thresh[marker])
if (markers[marker]=="pos" & expDat[marker,cell]>thresh[marker]){
count = count + 1
}else if (markers[marker]=="neg" & expDat[marker,cell]<thresh[marker]){
count = count + 1
}else{
break
}
}
if (count < length(markers)){
call_neg <- c(call_neg, cell)
}else{
call_pos <- c(call_pos, cell)
}
}
res<-list(call_pos=call_pos, call_neg=call_neg)
}
res<-simulate_flow(expDat,m,colnames(exp),control_cells=colnames(control))
simulate_flow<-function(expDat, markers, query_cells, control_cells=NA, neg_percentile=0.98, threshold=1){
expDat<-expDat[names(markers),]
if (!is.na(control_cells)){
control_exp<-expDat[,control_cells]
thresh<-setNames(rep(0,length(markers)),names(markers))
for (marker in names(markers)){
if (markers[marker]=="pos"){
thresh[marker]<-quantile(control_exp[marker,],neg_percentile)
}else{
thresh[marker]<-quantile(control_exp[marker,],(1-neg_percentile))
}
}
}else{
thresh<-setNames(rep(threshold,length(markers)),names(markers))
}
call_pos<-c()
call_neg<-c()
for (cell in query_cells){
count = 0
for (marker in names(markers)){
print(marker)
print(markers[marker])
print(expDat[marker,cell])
print(thresh[marker])
if (markers[marker]=="pos" & expDat[marker,cell]>thresh[marker]){
count = count + 1
}else if (markers[marker]=="neg" & expDat[marker,cell]<thresh[marker]){
count = count + 1
}else{
break
}
}
if (count < length(markers)){
call_neg <- c(call_neg, cell)
}else{
call_pos <- c(call_pos, cell)
}
}
res<-list(call_pos=call_pos, call_neg=call_neg)
}
res<-simulate_flow(expDat,m,colnames(exp),control_cells=colnames(control))
res
exp<-cytof_expX[,rownames(cytof_st[cytof_st$cell_type %in% c("B cells","NK cells"),])]
exp<-exp[,sample(colnames(exp),40)]
expDat<-cbind(exp,control)
cytof_st[colnames(expDat),]
cytof_st[colnames(exp),]
res<-simulate_flow(expDat,m,colnames(exp),control_cells=colnames(control))
res
table(cytof_st[colnames(exp),]$cell_type)
load("~/Desktop/LabThings/CyTOF/PBMC1/CyTOF_data/cytof_expX_052319.rda")
load("~/Desktop/LabThings/CyTOF/PBMC1/CyTOF_data/cytof_sampTab_052319.rda")
st<-cytof_st[colnames(exp),]
st[st$cell_type=="B cells"]
st[st$cell_type=="B cells",]
rownames(st[st$cell_type=="B cells",]) %in% res$call_pos
x<-c(4,2,6,8,3)
order(x,decreasing=FALSE)
x[order(x,decreasing=FALSE)]
load("~/Desktop/LabThings/Epoch/synthetic_data/trajectory02/trajectory02_100cells_expX_021020.rda")
exp<-expX
exp["A1_TF1",][order(exp["A1_TF1",],decreasing=FALSE)]
exp["A1_TF1",]
dim(exp)
profile<-exp["A1_TF1",][order(exp["A1_TF1",],decreasing=FALSE)]
profile
10*0.05
ceiling(10*0.05)
mean(profile[1:5])
mean(profile[95:length(profile)])
seq(1:3)
paste0(rep("epoch",num_epochs),seq(1:num_epochs))
num_epochs=3
paste0(rep("epoch",num_epochs),seq(1:num_epochs))
rowMeans(exp[1:20,])
data.frame(rowMeans(exp[1:20,]))
data.frame(means=rowMeans(exp[1:20,]))
library(igraph)
sessionInfo()
load("~/Desktop/LabThings/CyTOF/PBMC1/CyTOF_data/cytof_expX_052319.rda")
load("~/Desktop/LabThings/CyTOF/PBMC1/CyTOF_data/cytof_sampTab_052319.rda")
exp<-cytof_expX[,rownames(cytof_st[cytof_st$cell_type %in% c("B cells","NK cells"),])]
exp<-exp[,sample(colnames(exp),40)]
control<-cytof_expX[,sample(colnames(cytof_expX),20)]
control_cells<-cytof_st[colnames(control),]
control_cells<-control_cells[control_cells$cell_type!="B cells",]
control<-control[,rownames(control_cells)]
expDat<-cbind(exp,control)
source('~/Desktop/LabThings/CyTOF/marker_selection/RF_selector.R')
x=c(1,2,3,4,5,6,7,8,9,10)
plot(x,dexp(x))
plot(x,dexp(x,rate=0.5))
x=seq(0,10,by=0.25)
plot(x,dexp(x,rate=0.5))
plot(x,dexp(x,rate=0.1))
plot(x,dexp(x,rate=0.25))
plot(x,dexp(x,rate=1))
plot(x,dexp(x,rate=.25))+.2
plot(x,dexp(x,rate=.25)+.2)
plot(x,dexp(x,rate=1/10))
plot(x,dexp(x,rate=1/8))
plot(x,dexp(x,rate=1/40))
x=seq(0,40,by=0.25)
plot(x,dexp(x,rate=1/40))
x=seq(0,10,by=0.25)
plot(x,dexp(x,rate=1/10))
x=seq(0,40,by=0.25)
plot(x,dexp(x,rate=1/20))
plot(x,dexp(x,rate=1/10))
plot(x,x*e^-x)
plot(x,x*exp(-x))
plot(x,x*exp(-2))
plot(x,(-x/38)+1)
load("~/Desktop/LabThings/CyTOF/PBMC1/SCANPY_processed_062618/pbmc_scanpy_filtered_062618_regress.rda")
load("~/Desktop/LabThings/CyTOF/PBMC1/SCANPY_processed_062618/pbmc_scanpy_filtered_062618_regress_sampTab.rda")
pbmc_st$sample_id<-rownames(pbmc_st)
cnProc<-RFtrain(scanpy_expX,pbmc_st,rownames(scanpy_expX),dLevel="louvain")
source("~/Desktop/LabThings/CyTOF/marker_selection/RF_selector.R")
cnProc<-RFtrain(scanpy_expX,pbmc_st,rownames(scanpy_expX),dLevel="louvain")
x<-c(1,4,5,7)
sample(x)
sample(x)
load("~/Downloads/cnProc_pbmc.rda")
dim(pbmc_st)
cells<-sample(rownames(pbmc_st),50)
expVal<-pbmc_st[,cells]
expVal<-scanpy_expX[,cells]
stVal<-pbmc_st[cells,]
base_classification_matrix<-cn_classify(cnProc, expVal)
base_classification_matrix<-cn_classify(cnProc_pbmc, expVal)
base_classification_matrix<-cn_classify(cnProc_pbmc, as.matrix(expVal))
names(classList)
names(cnProc_pbmc)
names(cnProc_pbmc$classList)
base_classification_matrix<-cn_classify(cnProc$classList, expVal)
base_classification_matrix<-cn_classify(cnProc_pbmc$classList, expVal)
rm(pbmc_st,scanpy_expX)
rm(expVal,stVal,x,cells)
load("~/Downloads/expX_ab.rda")
load("~/Downloads/sampTab_pbmc.rda")
cells<-sample(rownames(sampTab_pbmc),50)
expVal<-expX_ab[,cells]
stVal<-sampTab_pbmc[cells,]
head(sampTab_pbmc)
base_classification_matrix<-cn_classify(cnProc_pbmc$classList, expVal)
dim(base_classification_matrix)
base_classification_matrix
head(sampTab_pbmc)
sampTab_pbmc$cell_name<-rownames(sampTab_pbmc)
stVal$cell_name<-rownames(stVal)
base_metrics<-cn_classAssess(base_classification_matrix,stVal,classLevels="cell_type_louvain",dLevelSID="cell_name")
base_metrics
names(base_metrics)
base_metrics[["Monocytes"]]
base_aupr<-rep(NA,length(names(base_metrics)))
base_aupr
names(base_aupr)<-names(base_aupr)
base_aupr
names(base_aupr)<-names(base_metrics)
base_aupr
markerLists<-sapply(names(cnProc$classList), function (x) df<-data.frame(gene=character(),foldchangeAUC=character(),diffAUC=character()))
markerLists<-sapply(names(cnProc_pbmc$classList), function (x) df<-data.frame(gene=character(),foldchangeAUC=character(),diffAUC=character()))
markerLists
markerLists<-sapply(names(cnProc_pbmc$classList), function (x) NULL)
markerList
markerLists
?assign
markerLists<-lapply(markerLists,df<-data.frame(gene=character(),foldchangeAUC=character(),diffAUC=character())
)
markerLists<-lapply(markerLists,data.frame(gene=character(),foldchangeAUC=character(),diffAUC=character()))
markerLists[[names(markerLists)]]<-data.frame(gene=character(),foldchangeAUC=character(),diffAUC=character())
markerLists[names(markerLists)]<-data.frame(gene=character(),foldchangeAUC=character(),diffAUC=character())
markerLists
markerLists<-sapply(names(cnProc_pbmc$classList), function (x) NULL)
markerLists
markerLists$Monocytes<-data.frame(gene=character(),foldchangeAUC=character(),diffAUC=character())
markerLists
names(markerLists)
markerList[["Monocytes"]]
markerLists[["Monocytes"]]
df<-data.frame(gene=character(),foldchangeAUC=character(),diffAUC=character())
for (type in names(markerLists)){
markerLists[[type]]<-df
}
markerLists
source("~/Desktop/LabThings/CyTOF/marker_selection/RF_selector.R")
rm(base_metrics,base_classification_matrix,markerLists,df,base_aupr,cells,type)
source("~/Desktop/LabThings/CyTOF/marker_selection/RF_selector.R")
markers<-PFmarkers(cnProc_pbmc,expVal,stVal,description_column = "cell_type_louvain")
source("~/Desktop/LabThings/CyTOF/marker_selection/RF_selector.R")
markers<-PFmarkers(cnProc_pbmc,expVal,stVal,description_column = "cell_type_louvain")
source("~/Desktop/LabThings/CyTOF/marker_selection/RF_selector.R")
markers<-PFmarkers(cnProc_pbmc,expVal,stVal,description_column = "cell_type_louvain")
source("~/Desktop/LabThings/CyTOF/marker_selection/RF_selector.R")
markers<-PFmarkers(cnProc_pbmc,expVal,stVal,description_column = "cell_type_louvain")
markers
rfmarkers<-RFpickmarkers(cnProc)
rfmarkers<-RFpickmarkers(cnProc_pbmc)
rfmarkers
library(reshape2)
library(ggplot2)
library(igraph)
library(qgraph)
library(loomR)
library(gam)
library(minet)
library(singleCellNet)
library(pheatmap)
library(RColorBrewer)
library(SCopeLoomR)
library(GENIE3)
library(loomR)
library(DescTools)
setwd("~/Desktop/LabThings/Epoch/Epoch/warpnet")
devtools::load_all()
library(dyngen)
library(tidyverse)
set.seed(1111)
model <-initialise_model(
num_tfs = 500,
num_targets = 2000,
num_hks = 500,
backbone = backbone_consecutive_bifurcating(),
verbose = TRUE,
num_cells = 3000
)
gen_data <- function(model, output_dir = NULL, make_plots = FALSE, store_grn = FALSE){
model <- model %>%
generate_tf_network() %>%
generate_feature_network() %>%
generate_kinetics() %>%
generate_gold_standard() %>%
generate_cells() %>%
generate_experiment()
dataset <-
wrap_dataset(model, store_grn = store_grn)
# write to file
if (!is.null(output_dir)) {
dir.create(dirname(output_dir), showWarnings = FALSE, recursive = FALSE)
write_rds(dataset, paste0(output_dir, "dataset.rds"), compress = "gz")
write_rds(model, paste0(output_dir, "model.rds"), compress = "gz")
}
if (make_plots) {
# make plots :scream:
g1 <- plot_backbone_statenet(model) + labs(title = "Backbone state network")
g2 <- plot_backbone_modulenet(model) + labs(title = "Backbone module reg. net.")
g3 <- plot_feature_network(model, show_targets = FALSE) + labs(title = "TF reg. net.")
g4 <- plot_feature_network(model) + labs(title = "TF + target reg. net.")
g5 <- plot_gold_simulations(model) + labs(title = "Gold + simulations")
g6 <- plot_gold_mappings(model, do_facet = FALSE) + labs(title = "Simulations to gold mapping")
g7 <- plot_simulations(model) + labs(title = "Simulation time")
g8 <- plot_gold_expression(model, what = "w") + labs(title = "Gold pre-mRNA expression over time")
g9 <- plot_simulation_expression(model, what = "w") + labs(title = "Simulation 1 pre-mRNA expression over time")
g10 <- plot_simulation_expression(model, what = "x") + labs(title = "Simulation 1 mRNA expression over time")
g11 <- plot_gold_expression(model, what = "x") + labs(title = "Gold mRNA expression over time")
g <- patchwork::wrap_plots(
g1, g2, g3, g4, g5, g6, g7, g8, g11, g9, g10,
byrow = TRUE,
ncol = 3
) +
patchwork::plot_annotation(tag_levels = "A")
if (!is.null(output_dir)) {
ggsave(paste0(output_dir, "plot.pdf"), g, width = 30, height = 25)
}
}
if (is.null(output_dir)) {
out <- list(dataset = dataset, model = model)
if (make_plots) {
out$plot <- g
}
out
} else {
invisible()
}
}
out<-gen_data(model,make_plots=TRUE)
set.seed(888)
rm(model,out)
model <-initialise_model(
num_tfs = 500,
num_targets = 2000,
num_hks = 500,
backbone = backbone_consecutive_bifurcating(),
verbose = TRUE,
num_cells = 3000
)
out<-gen_data(model,make_plots=TRUE)
